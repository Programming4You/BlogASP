//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BlogAsp.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BlogEntities : DbContext
    {
        public BlogEntities()
            : base("name=BlogEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Article> Articles { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<PollAnswer> PollAnswers { get; set; }
        public virtual DbSet<PollQuestion> PollQuestions { get; set; }
        public virtual DbSet<PollVote> PollVotes { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
    
        public virtual int spInsertPollVote(string ipAddress, Nullable<int> idAnswer)
        {
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var idAnswerParameter = idAnswer.HasValue ?
                new ObjectParameter("idAnswer", idAnswer) :
                new ObjectParameter("idAnswer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPollVote", ipAddressParameter, idAnswerParameter);
        }
    
        public virtual int spInsertPollQuestion(string question)
        {
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPollQuestion", questionParameter);
        }
    
        public virtual int spDeletePollQuestion(Nullable<int> idPollQuestion)
        {
            var idPollQuestionParameter = idPollQuestion.HasValue ?
                new ObjectParameter("idPollQuestion", idPollQuestion) :
                new ObjectParameter("idPollQuestion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeletePollQuestion", idPollQuestionParameter);
        }
    
        public virtual int spInsertPollAnswer(Nullable<int> idPollQuestion, string answer)
        {
            var idPollQuestionParameter = idPollQuestion.HasValue ?
                new ObjectParameter("idPollQuestion", idPollQuestion) :
                new ObjectParameter("idPollQuestion", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("answer", answer) :
                new ObjectParameter("answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertPollAnswer", idPollQuestionParameter, answerParameter);
        }
    
        public virtual int spUpdatePollQuestion(Nullable<int> idPollQuestion, string question, Nullable<int> idLastUser)
        {
            var idPollQuestionParameter = idPollQuestion.HasValue ?
                new ObjectParameter("idPollQuestion", idPollQuestion) :
                new ObjectParameter("idPollQuestion", typeof(int));
    
            var questionParameter = question != null ?
                new ObjectParameter("question", question) :
                new ObjectParameter("question", typeof(string));
    
            var idLastUserParameter = idLastUser.HasValue ?
                new ObjectParameter("idLastUser", idLastUser) :
                new ObjectParameter("idLastUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePollQuestion", idPollQuestionParameter, questionParameter, idLastUserParameter);
        }
    }
}
